// Code generated by ogen, DO NOT EDIT.

package petstore

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
)

type APIKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *APIKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *APIKey) SetAPIKey(val string) {
	s.APIKey = val
}

// Ref: #/components/schemas/Address
type Address struct {
	City    OptString `json:"city"`
	Country OptString `json:"country"`
	// Includes build/apartment number.
	Street OptString `json:"street"`
}

// GetCity returns the value of City.
func (s *Address) GetCity() OptString {
	return s.City
}

// GetCountry returns the value of Country.
func (s *Address) GetCountry() OptString {
	return s.Country
}

// GetStreet returns the value of Street.
func (s *Address) GetStreet() OptString {
	return s.Street
}

// SetCity sets the value of City.
func (s *Address) SetCity(val OptString) {
	s.City = val
}

// SetCountry sets the value of Country.
func (s *Address) SetCountry(val OptString) {
	s.Country = val
}

// SetStreet sets the value of Street.
func (s *Address) SetStreet(val OptString) {
	s.Street = val
}

// Ref: #/components/schemas/ApiResponse
type ApiResponse struct {
	Code    OptInt32  `json:"code"`
	Type    OptString `json:"type"`
	Message OptString `json:"message"`
}

// GetCode returns the value of Code.
func (s *ApiResponse) GetCode() OptInt32 {
	return s.Code
}

// GetType returns the value of Type.
func (s *ApiResponse) GetType() OptString {
	return s.Type
}

// GetMessage returns the value of Message.
func (s *ApiResponse) GetMessage() OptString {
	return s.Message
}

// SetCode sets the value of Code.
func (s *ApiResponse) SetCode(val OptInt32) {
	s.Code = val
}

// SetType sets the value of Type.
func (s *ApiResponse) SetType(val OptString) {
	s.Type = val
}

// SetMessage sets the value of Message.
func (s *ApiResponse) SetMessage(val OptString) {
	s.Message = val
}

// Ref: #/components/schemas/Category
type Category struct {
	// Category ID.
	ID OptID `json:"id"`
	// Category name.
	Name OptString `json:"name"`
	// Test Sub Category.
	Sub OptCategorySub `json:"sub"`
}

// GetID returns the value of ID.
func (s *Category) GetID() OptID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Category) GetName() OptString {
	return s.Name
}

// GetSub returns the value of Sub.
func (s *Category) GetSub() OptCategorySub {
	return s.Sub
}

// SetID sets the value of ID.
func (s *Category) SetID(val OptID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Category) SetName(val OptString) {
	s.Name = val
}

// SetSub sets the value of Sub.
func (s *Category) SetSub(val OptCategorySub) {
	s.Sub = val
}

// Test Sub Category.
type CategorySub struct {
	// Dumb Property.
	Prop1 OptString `json:"prop1"`
}

// GetProp1 returns the value of Prop1.
func (s *CategorySub) GetProp1() OptString {
	return s.Prop1
}

// SetProp1 sets the value of Prop1.
func (s *CategorySub) SetProp1(val OptString) {
	s.Prop1 = val
}

// CreateUserDef is default response for CreateUser operation.
type CreateUserDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *CreateUserDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *CreateUserDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// CreateUsersWithArrayInputDef is default response for CreateUsersWithArrayInput operation.
type CreateUsersWithArrayInputDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *CreateUsersWithArrayInputDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *CreateUsersWithArrayInputDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// CreateUsersWithListInputDef is default response for CreateUsersWithListInput operation.
type CreateUsersWithListInputDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *CreateUsersWithListInputDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *CreateUsersWithListInputDef) SetStatusCode(val int) {
	s.StatusCode = val
}

type DeleteOrderBadRequest Error

func (*DeleteOrderBadRequest) deleteOrderRes() {}

type DeleteOrderNotFound Error

func (*DeleteOrderNotFound) deleteOrderRes() {}

type DeleteUserBadRequest Error

func (*DeleteUserBadRequest) deleteUserRes() {}

type DeleteUserNotFound Error

func (*DeleteUserNotFound) deleteUserRes() {}

// Ref: #/components/schemas/Error
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GetCode returns the value of Code.
func (s *Error) GetCode() int {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *Error) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *Error) SetCode(val int) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *Error) SetMessage(val string) {
	s.Message = val
}

func (*Error) findPetsByStatusRes() {}
func (*Error) findPetsByTagsRes()   {}
func (*Error) loginUserRes()        {}

type FindPetsByStatusOKApplicationJSON []Pet

func (*FindPetsByStatusOKApplicationJSON) findPetsByStatusRes() {}

type FindPetsByStatusStatusItem string

const (
	FindPetsByStatusStatusItemAvailable FindPetsByStatusStatusItem = "available"
	FindPetsByStatusStatusItemPending   FindPetsByStatusStatusItem = "pending"
	FindPetsByStatusStatusItemSold      FindPetsByStatusStatusItem = "sold"
)

// MarshalText implements encoding.TextMarshaler.
func (s FindPetsByStatusStatusItem) MarshalText() ([]byte, error) {
	switch s {
	case FindPetsByStatusStatusItemAvailable:
		return []byte(s), nil
	case FindPetsByStatusStatusItemPending:
		return []byte(s), nil
	case FindPetsByStatusStatusItemSold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *FindPetsByStatusStatusItem) UnmarshalText(data []byte) error {
	switch FindPetsByStatusStatusItem(data) {
	case FindPetsByStatusStatusItemAvailable:
		*s = FindPetsByStatusStatusItemAvailable
		return nil
	case FindPetsByStatusStatusItemPending:
		*s = FindPetsByStatusStatusItemPending
		return nil
	case FindPetsByStatusStatusItemSold:
		*s = FindPetsByStatusStatusItemSold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type FindPetsByTagsOKApplicationJSON []Pet

func (*FindPetsByTagsOKApplicationJSON) findPetsByTagsRes() {}

type GetInventoryOK map[string]int32

func (s *GetInventoryOK) init() GetInventoryOK {
	m := *s
	if m == nil {
		m = map[string]int32{}
		*s = m
	}
	return m
}

type GetOrderByIdBadRequest Error

func (*GetOrderByIdBadRequest) getOrderByIdRes() {}

type GetOrderByIdNotFound Error

func (*GetOrderByIdNotFound) getOrderByIdRes() {}

type GetPetByIdBadRequest Error

func (*GetPetByIdBadRequest) getPetByIdRes() {}

type GetPetByIdNotFound Error

func (*GetPetByIdNotFound) getPetByIdRes() {}

type GetUserByNameBadRequest Error

func (*GetUserByNameBadRequest) getUserByNameRes() {}

type GetUserByNameNotFound Error

func (*GetUserByNameNotFound) getUserByNameRes() {}

type ID int64

// LoginUserOKHeaders wraps string with response headers.
type LoginUserOKHeaders struct {
	XExpiresAfter OptDateTime
	XRateLimit    OptInt32
	Response      string
}

// GetXExpiresAfter returns the value of XExpiresAfter.
func (s *LoginUserOKHeaders) GetXExpiresAfter() OptDateTime {
	return s.XExpiresAfter
}

// GetXRateLimit returns the value of XRateLimit.
func (s *LoginUserOKHeaders) GetXRateLimit() OptInt32 {
	return s.XRateLimit
}

// GetResponse returns the value of Response.
func (s *LoginUserOKHeaders) GetResponse() string {
	return s.Response
}

// SetXExpiresAfter sets the value of XExpiresAfter.
func (s *LoginUserOKHeaders) SetXExpiresAfter(val OptDateTime) {
	s.XExpiresAfter = val
}

// SetXRateLimit sets the value of XRateLimit.
func (s *LoginUserOKHeaders) SetXRateLimit(val OptInt32) {
	s.XRateLimit = val
}

// SetResponse sets the value of Response.
func (s *LoginUserOKHeaders) SetResponse(val string) {
	s.Response = val
}

func (*LoginUserOKHeaders) loginUserRes() {}

type LoginUserOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s LoginUserOKTextPlain) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

// LoginUserOKTextPlainHeaders wraps LoginUserOKTextPlain with response headers.
type LoginUserOKTextPlainHeaders struct {
	XExpiresAfter OptDateTime
	XRateLimit    OptInt32
	Response      LoginUserOKTextPlain
}

// GetXExpiresAfter returns the value of XExpiresAfter.
func (s *LoginUserOKTextPlainHeaders) GetXExpiresAfter() OptDateTime {
	return s.XExpiresAfter
}

// GetXRateLimit returns the value of XRateLimit.
func (s *LoginUserOKTextPlainHeaders) GetXRateLimit() OptInt32 {
	return s.XRateLimit
}

// GetResponse returns the value of Response.
func (s *LoginUserOKTextPlainHeaders) GetResponse() LoginUserOKTextPlain {
	return s.Response
}

// SetXExpiresAfter sets the value of XExpiresAfter.
func (s *LoginUserOKTextPlainHeaders) SetXExpiresAfter(val OptDateTime) {
	s.XExpiresAfter = val
}

// SetXRateLimit sets the value of XRateLimit.
func (s *LoginUserOKTextPlainHeaders) SetXRateLimit(val OptInt32) {
	s.XRateLimit = val
}

// SetResponse sets the value of Response.
func (s *LoginUserOKTextPlainHeaders) SetResponse(val LoginUserOKTextPlain) {
	s.Response = val
}

func (*LoginUserOKTextPlainHeaders) loginUserRes() {}

// LogoutUserDef is default response for LogoutUser operation.
type LogoutUserDef struct {
	StatusCode int
}

// GetStatusCode returns the value of StatusCode.
func (s *LogoutUserDef) GetStatusCode() int {
	return s.StatusCode
}

// SetStatusCode sets the value of StatusCode.
func (s *LogoutUserDef) SetStatusCode(val int) {
	s.StatusCode = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategory returns new OptCategory with value set to v.
func NewOptCategory(v Category) OptCategory {
	return OptCategory{
		Value: v,
		Set:   true,
	}
}

// OptCategory is optional Category.
type OptCategory struct {
	Value Category
	Set   bool
}

// IsSet returns true if OptCategory was set.
func (o OptCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategory) Reset() {
	var v Category
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategory) SetTo(v Category) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategory) Get() (v Category, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategory) Or(d Category) Category {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategorySub returns new OptCategorySub with value set to v.
func NewOptCategorySub(v CategorySub) OptCategorySub {
	return OptCategorySub{
		Value: v,
		Set:   true,
	}
}

// OptCategorySub is optional CategorySub.
type OptCategorySub struct {
	Value CategorySub
	Set   bool
}

// IsSet returns true if OptCategorySub was set.
func (o OptCategorySub) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategorySub) Reset() {
	var v CategorySub
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategorySub) SetTo(v CategorySub) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategorySub) Get() (v CategorySub, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategorySub) Or(d CategorySub) CategorySub {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptID returns new OptID with value set to v.
func NewOptID(v ID) OptID {
	return OptID{
		Value: v,
		Set:   true,
	}
}

// OptID is optional ID.
type OptID struct {
	Value ID
	Set   bool
}

// IsSet returns true if OptID was set.
func (o OptID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptID) Reset() {
	var v ID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptID) SetTo(v ID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptID) Get() (v ID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptID) Or(d ID) ID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOrderStatus returns new OptOrderStatus with value set to v.
func NewOptOrderStatus(v OrderStatus) OptOrderStatus {
	return OptOrderStatus{
		Value: v,
		Set:   true,
	}
}

// OptOrderStatus is optional OrderStatus.
type OptOrderStatus struct {
	Value OrderStatus
	Set   bool
}

// IsSet returns true if OptOrderStatus was set.
func (o OptOrderStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOrderStatus) Reset() {
	var v OrderStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOrderStatus) SetTo(v OrderStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOrderStatus) Get() (v OrderStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOrderStatus) Or(d OrderStatus) OrderStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPet returns new OptPet with value set to v.
func NewOptPet(v Pet) OptPet {
	return OptPet{
		Value: v,
		Set:   true,
	}
}

// OptPet is optional Pet.
type OptPet struct {
	Value Pet
	Set   bool
}

// IsSet returns true if OptPet was set.
func (o OptPet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPet) Reset() {
	var v Pet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPet) SetTo(v Pet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPet) Get() (v Pet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPet) Or(d Pet) Pet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPetStatus returns new OptPetStatus with value set to v.
func NewOptPetStatus(v PetStatus) OptPetStatus {
	return OptPetStatus{
		Value: v,
		Set:   true,
	}
}

// OptPetStatus is optional PetStatus.
type OptPetStatus struct {
	Value PetStatus
	Set   bool
}

// IsSet returns true if OptPetStatus was set.
func (o OptPetStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPetStatus) Reset() {
	var v PetStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPetStatus) SetTo(v PetStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPetStatus) Get() (v PetStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPetStatus) Or(d PetStatus) PetStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptStoreSubscribePostReq returns new OptStoreSubscribePostReq with value set to v.
func NewOptStoreSubscribePostReq(v StoreSubscribePostReq) OptStoreSubscribePostReq {
	return OptStoreSubscribePostReq{
		Value: v,
		Set:   true,
	}
}

// OptStoreSubscribePostReq is optional StoreSubscribePostReq.
type OptStoreSubscribePostReq struct {
	Value StoreSubscribePostReq
	Set   bool
}

// IsSet returns true if OptStoreSubscribePostReq was set.
func (o OptStoreSubscribePostReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptStoreSubscribePostReq) Reset() {
	var v StoreSubscribePostReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptStoreSubscribePostReq) SetTo(v StoreSubscribePostReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptStoreSubscribePostReq) Get() (v StoreSubscribePostReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptStoreSubscribePostReq) Or(d StoreSubscribePostReq) StoreSubscribePostReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUpdatePetWithFormReq returns new OptUpdatePetWithFormReq with value set to v.
func NewOptUpdatePetWithFormReq(v UpdatePetWithFormReq) OptUpdatePetWithFormReq {
	return OptUpdatePetWithFormReq{
		Value: v,
		Set:   true,
	}
}

// OptUpdatePetWithFormReq is optional UpdatePetWithFormReq.
type OptUpdatePetWithFormReq struct {
	Value UpdatePetWithFormReq
	Set   bool
}

// IsSet returns true if OptUpdatePetWithFormReq was set.
func (o OptUpdatePetWithFormReq) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUpdatePetWithFormReq) Reset() {
	var v UpdatePetWithFormReq
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUpdatePetWithFormReq) SetTo(v UpdatePetWithFormReq) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUpdatePetWithFormReq) Get() (v UpdatePetWithFormReq, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUpdatePetWithFormReq) Or(d UpdatePetWithFormReq) UpdatePetWithFormReq {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUserPet returns new OptUserPet with value set to v.
func NewOptUserPet(v UserPet) OptUserPet {
	return OptUserPet{
		Value: v,
		Set:   true,
	}
}

// OptUserPet is optional UserPet.
type OptUserPet struct {
	Value UserPet
	Set   bool
}

// IsSet returns true if OptUserPet was set.
func (o OptUserPet) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUserPet) Reset() {
	var v UserPet
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUserPet) SetTo(v UserPet) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUserPet) Get() (v UserPet, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUserPet) Or(d UserPet) UserPet {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Order
type Order struct {
	// Order ID.
	ID OptID `json:"id"`
	// Pet ID.
	PetId    OptID    `json:"petId"`
	Quantity OptInt32 `json:"quantity"`
	// Estimated ship date.
	ShipDate OptDateTime `json:"shipDate"`
	// Order Status.
	Status OptOrderStatus `json:"status"`
	// Indicates whenever order was completed or not.
	Complete OptBool `json:"complete"`
	// Unique Request Id.
	RequestId OptString `json:"requestId"`
}

// GetID returns the value of ID.
func (s *Order) GetID() OptID {
	return s.ID
}

// GetPetId returns the value of PetId.
func (s *Order) GetPetId() OptID {
	return s.PetId
}

// GetQuantity returns the value of Quantity.
func (s *Order) GetQuantity() OptInt32 {
	return s.Quantity
}

// GetShipDate returns the value of ShipDate.
func (s *Order) GetShipDate() OptDateTime {
	return s.ShipDate
}

// GetStatus returns the value of Status.
func (s *Order) GetStatus() OptOrderStatus {
	return s.Status
}

// GetComplete returns the value of Complete.
func (s *Order) GetComplete() OptBool {
	return s.Complete
}

// GetRequestId returns the value of RequestId.
func (s *Order) GetRequestId() OptString {
	return s.RequestId
}

// SetID sets the value of ID.
func (s *Order) SetID(val OptID) {
	s.ID = val
}

// SetPetId sets the value of PetId.
func (s *Order) SetPetId(val OptID) {
	s.PetId = val
}

// SetQuantity sets the value of Quantity.
func (s *Order) SetQuantity(val OptInt32) {
	s.Quantity = val
}

// SetShipDate sets the value of ShipDate.
func (s *Order) SetShipDate(val OptDateTime) {
	s.ShipDate = val
}

// SetStatus sets the value of Status.
func (s *Order) SetStatus(val OptOrderStatus) {
	s.Status = val
}

// SetComplete sets the value of Complete.
func (s *Order) SetComplete(val OptBool) {
	s.Complete = val
}

// SetRequestId sets the value of RequestId.
func (s *Order) SetRequestId(val OptString) {
	s.RequestId = val
}

func (*Order) getOrderByIdRes() {}

// Order Status.
type OrderStatus string

const (
	OrderStatusPlaced    OrderStatus = "placed"
	OrderStatusApproved  OrderStatus = "approved"
	OrderStatusDelivered OrderStatus = "delivered"
)

// MarshalText implements encoding.TextMarshaler.
func (s OrderStatus) MarshalText() ([]byte, error) {
	switch s {
	case OrderStatusPlaced:
		return []byte(s), nil
	case OrderStatusApproved:
		return []byte(s), nil
	case OrderStatusDelivered:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *OrderStatus) UnmarshalText(data []byte) error {
	switch OrderStatus(data) {
	case OrderStatusPlaced:
		*s = OrderStatusPlaced
		return nil
	case OrderStatusApproved:
		*s = OrderStatusApproved
		return nil
	case OrderStatusDelivered:
		*s = OrderStatusDelivered
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Pet
type Pet struct {
	// Pet ID.
	ID OptID `json:"id"`
	// Categories this pet belongs to.
	Category OptCategory `json:"category"`
	// The name given to a pet.
	Name string `json:"name"`
	// The list of URL to a cute photos featuring pet.
	PhotoUrls []string `json:"photoUrls"`
	Friend    *Pet     `json:"friend"`
	// Tags attached to the pet.
	Tags []Tag `json:"tags"`
	// Pet status in the store.
	Status OptPetStatus `json:"status"`
	// Type of a pet.
	PetType OptString `json:"petType"`
}

// GetID returns the value of ID.
func (s *Pet) GetID() OptID {
	return s.ID
}

// GetCategory returns the value of Category.
func (s *Pet) GetCategory() OptCategory {
	return s.Category
}

// GetName returns the value of Name.
func (s *Pet) GetName() string {
	return s.Name
}

// GetPhotoUrls returns the value of PhotoUrls.
func (s *Pet) GetPhotoUrls() []string {
	return s.PhotoUrls
}

// GetFriend returns the value of Friend.
func (s *Pet) GetFriend() *Pet {
	return s.Friend
}

// GetTags returns the value of Tags.
func (s *Pet) GetTags() []Tag {
	return s.Tags
}

// GetStatus returns the value of Status.
func (s *Pet) GetStatus() OptPetStatus {
	return s.Status
}

// GetPetType returns the value of PetType.
func (s *Pet) GetPetType() OptString {
	return s.PetType
}

// SetID sets the value of ID.
func (s *Pet) SetID(val OptID) {
	s.ID = val
}

// SetCategory sets the value of Category.
func (s *Pet) SetCategory(val OptCategory) {
	s.Category = val
}

// SetName sets the value of Name.
func (s *Pet) SetName(val string) {
	s.Name = val
}

// SetPhotoUrls sets the value of PhotoUrls.
func (s *Pet) SetPhotoUrls(val []string) {
	s.PhotoUrls = val
}

// SetFriend sets the value of Friend.
func (s *Pet) SetFriend(val *Pet) {
	s.Friend = val
}

// SetTags sets the value of Tags.
func (s *Pet) SetTags(val []Tag) {
	s.Tags = val
}

// SetStatus sets the value of Status.
func (s *Pet) SetStatus(val OptPetStatus) {
	s.Status = val
}

// SetPetType sets the value of PetType.
func (s *Pet) SetPetType(val OptString) {
	s.PetType = val
}

func (*Pet) getPetByIdRes() {}

// Pet status in the store.
type PetStatus string

const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// MarshalText implements encoding.TextMarshaler.
func (s PetStatus) MarshalText() ([]byte, error) {
	switch s {
	case PetStatusAvailable:
		return []byte(s), nil
	case PetStatusPending:
		return []byte(s), nil
	case PetStatusSold:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PetStatus) UnmarshalText(data []byte) error {
	switch PetStatus(data) {
	case PetStatusAvailable:
		*s = PetStatusAvailable
		return nil
	case PetStatusPending:
		*s = PetStatusPending
		return nil
	case PetStatusSold:
		*s = PetStatusSold
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StoreSubscribePostCreated struct {
	SubscriptionId OptString `json:"subscriptionId"`
}

// GetSubscriptionId returns the value of SubscriptionId.
func (s *StoreSubscribePostCreated) GetSubscriptionId() OptString {
	return s.SubscriptionId
}

// SetSubscriptionId sets the value of SubscriptionId.
func (s *StoreSubscribePostCreated) SetSubscriptionId(val OptString) {
	s.SubscriptionId = val
}

type StoreSubscribePostReq struct {
	// This URL will be called by the server when the desired event will occur.
	CallbackUrl url.URL `json:"callbackUrl"`
	// Event name for the subscription.
	EventName StoreSubscribePostReqEventName `json:"eventName"`
}

// GetCallbackUrl returns the value of CallbackUrl.
func (s *StoreSubscribePostReq) GetCallbackUrl() url.URL {
	return s.CallbackUrl
}

// GetEventName returns the value of EventName.
func (s *StoreSubscribePostReq) GetEventName() StoreSubscribePostReqEventName {
	return s.EventName
}

// SetCallbackUrl sets the value of CallbackUrl.
func (s *StoreSubscribePostReq) SetCallbackUrl(val url.URL) {
	s.CallbackUrl = val
}

// SetEventName sets the value of EventName.
func (s *StoreSubscribePostReq) SetEventName(val StoreSubscribePostReqEventName) {
	s.EventName = val
}

// Event name for the subscription.
type StoreSubscribePostReqEventName string

const (
	StoreSubscribePostReqEventNameOrderInProgress StoreSubscribePostReqEventName = "orderInProgress"
	StoreSubscribePostReqEventNameOrderShipped    StoreSubscribePostReqEventName = "orderShipped"
	StoreSubscribePostReqEventNameOrderDelivered  StoreSubscribePostReqEventName = "orderDelivered"
)

// MarshalText implements encoding.TextMarshaler.
func (s StoreSubscribePostReqEventName) MarshalText() ([]byte, error) {
	switch s {
	case StoreSubscribePostReqEventNameOrderInProgress:
		return []byte(s), nil
	case StoreSubscribePostReqEventNameOrderShipped:
		return []byte(s), nil
	case StoreSubscribePostReqEventNameOrderDelivered:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StoreSubscribePostReqEventName) UnmarshalText(data []byte) error {
	switch StoreSubscribePostReqEventName(data) {
	case StoreSubscribePostReqEventNameOrderInProgress:
		*s = StoreSubscribePostReqEventNameOrderInProgress
		return nil
	case StoreSubscribePostReqEventNameOrderShipped:
		*s = StoreSubscribePostReqEventNameOrderShipped
		return nil
	case StoreSubscribePostReqEventNameOrderDelivered:
		*s = StoreSubscribePostReqEventNameOrderDelivered
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Tag
type Tag struct {
	// Tag ID.
	ID OptID `json:"id"`
	// Tag name.
	Name OptString `json:"name"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() OptID {
	return s.ID
}

// GetName returns the value of Name.
func (s *Tag) GetName() OptString {
	return s.Name
}

// SetID sets the value of ID.
func (s *Tag) SetID(val OptID) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val OptString) {
	s.Name = val
}

type UpdatePetBadRequest Error

func (*UpdatePetBadRequest) updatePetRes() {}

type UpdatePetMethodNotAllowed Error

func (*UpdatePetMethodNotAllowed) updatePetRes() {}

type UpdatePetNotFound Error

func (*UpdatePetNotFound) updatePetRes() {}

type UpdatePetWithFormReq struct {
	// Updated name of the pet.
	Name OptString `json:"name"`
	// Updated status of the pet.
	Status OptString `json:"status"`
}

// GetName returns the value of Name.
func (s *UpdatePetWithFormReq) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *UpdatePetWithFormReq) GetStatus() OptString {
	return s.Status
}

// SetName sets the value of Name.
func (s *UpdatePetWithFormReq) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *UpdatePetWithFormReq) SetStatus(val OptString) {
	s.Status = val
}

type UpdateUserBadRequest Error

func (*UpdateUserBadRequest) updateUserRes() {}

type UpdateUserNotFound Error

func (*UpdateUserNotFound) updateUserRes() {}

type UploadFileReq struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s UploadFileReq) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, nil
	}
	return s.Data.Read(p)
}

// Ref: #/components/schemas/User
type User struct {
	ID  OptID      `json:"id"`
	Pet OptUserPet `json:"pet"`
	// User supplied username.
	Username OptString `json:"username"`
	// User first name.
	FirstName OptString `json:"firstName"`
	// User last name.
	LastName OptString `json:"lastName"`
	// User email address.
	Email OptString `json:"email"`
	// User password, MUST contain a mix of upper and lower case letters, as well as digits.
	Password OptString `json:"password"`
	// User phone number in international format.
	Phone OptString `json:"phone"`
	// User status.
	UserStatus OptInt32  `json:"userStatus"`
	Addresses  []Address `json:"addresses"`
}

// GetID returns the value of ID.
func (s *User) GetID() OptID {
	return s.ID
}

// GetPet returns the value of Pet.
func (s *User) GetPet() OptUserPet {
	return s.Pet
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() OptString {
	return s.Username
}

// GetFirstName returns the value of FirstName.
func (s *User) GetFirstName() OptString {
	return s.FirstName
}

// GetLastName returns the value of LastName.
func (s *User) GetLastName() OptString {
	return s.LastName
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() OptString {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *User) GetPassword() OptString {
	return s.Password
}

// GetPhone returns the value of Phone.
func (s *User) GetPhone() OptString {
	return s.Phone
}

// GetUserStatus returns the value of UserStatus.
func (s *User) GetUserStatus() OptInt32 {
	return s.UserStatus
}

// GetAddresses returns the value of Addresses.
func (s *User) GetAddresses() []Address {
	return s.Addresses
}

// SetID sets the value of ID.
func (s *User) SetID(val OptID) {
	s.ID = val
}

// SetPet sets the value of Pet.
func (s *User) SetPet(val OptUserPet) {
	s.Pet = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val OptString) {
	s.Username = val
}

// SetFirstName sets the value of FirstName.
func (s *User) SetFirstName(val OptString) {
	s.FirstName = val
}

// SetLastName sets the value of LastName.
func (s *User) SetLastName(val OptString) {
	s.LastName = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val OptString) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *User) SetPassword(val OptString) {
	s.Password = val
}

// SetPhone sets the value of Phone.
func (s *User) SetPhone(val OptString) {
	s.Phone = val
}

// SetUserStatus sets the value of UserStatus.
func (s *User) SetUserStatus(val OptInt32) {
	s.UserStatus = val
}

// SetAddresses sets the value of Addresses.
func (s *User) SetAddresses(val []Address) {
	s.Addresses = val
}

func (*User) getUserByNameRes() {}

// UserPet represents sum type.
type UserPet struct {
	Type UserPetType // switch on this field
	Pet  Pet
	Tag  Tag
}

// UserPetType is oneOf type of UserPet.
type UserPetType string

// Possible values for UserPetType.
const (
	PetUserPet UserPetType = "Pet"
	TagUserPet UserPetType = "Tag"
)

// IsPet reports whether UserPet is Pet.
func (s UserPet) IsPet() bool { return s.Type == PetUserPet }

// IsTag reports whether UserPet is Tag.
func (s UserPet) IsTag() bool { return s.Type == TagUserPet }

// SetPet sets UserPet to Pet.
func (s *UserPet) SetPet(v Pet) {
	s.Type = PetUserPet
	s.Pet = v
}

// GetPet returns Pet and true boolean if UserPet is Pet.
func (s UserPet) GetPet() (v Pet, ok bool) {
	if !s.IsPet() {
		return v, false
	}
	return s.Pet, true
}

// NewPetUserPet returns new UserPet from Pet.
func NewPetUserPet(v Pet) UserPet {
	var s UserPet
	s.SetPet(v)
	return s
}

// SetTag sets UserPet to Tag.
func (s *UserPet) SetTag(v Tag) {
	s.Type = TagUserPet
	s.Tag = v
}

// GetTag returns Tag and true boolean if UserPet is Tag.
func (s UserPet) GetTag() (v Tag, ok bool) {
	if !s.IsTag() {
		return v, false
	}
	return s.Tag, true
}

// NewTagUserPet returns new UserPet from Tag.
func NewTagUserPet(v Tag) UserPet {
	var s UserPet
	s.SetTag(v)
	return s
}
