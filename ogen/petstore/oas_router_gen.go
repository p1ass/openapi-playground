// Code generated by ogen, DO NOT EDIT.

package petstore

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'p': // Prefix: "pet"
				if l := len("pet"); len(elem) >= l && elem[0:l] == "pet" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "POST":
						s.handleAddPetRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleUpdatePetRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST,PUT")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "findBy"
						if l := len("findBy"); len(elem) >= l && elem[0:l] == "findBy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'S': // Prefix: "Status"
							if l := len("Status"); len(elem) >= l && elem[0:l] == "Status" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleFindPetsByStatusRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'T': // Prefix: "Tags"
							if l := len("Tags"); len(elem) >= l && elem[0:l] == "Tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleFindPetsByTagsRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
					// Param: "petId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeletePetRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetPetByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "POST":
							s.handleUpdatePetWithFormRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/uploadImage"
						if l := len("/uploadImage"); len(elem) >= l && elem[0:l] == "/uploadImage" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleUploadFileRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			case 's': // Prefix: "store/"
				if l := len("store/"); len(elem) >= l && elem[0:l] == "store/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "inventory"
					if l := len("inventory"); len(elem) >= l && elem[0:l] == "inventory" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetInventoryRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'o': // Prefix: "order/"
					if l := len("order/"); len(elem) >= l && elem[0:l] == "order/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "orderId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteOrderRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetOrderByIdRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET")
						}

						return
					}
				case 's': // Prefix: "subscribe"
					if l := len("subscribe"); len(elem) >= l && elem[0:l] == "subscribe" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleStoreSubscribePostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'u': // Prefix: "user"
				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "POST":
						s.handleCreateUserRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "createWith"
						if l := len("createWith"); len(elem) >= l && elem[0:l] == "createWith" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Array"
							if l := len("Array"); len(elem) >= l && elem[0:l] == "Array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleCreateUsersWithArrayInputRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'L': // Prefix: "List"
							if l := len("List"); len(elem) >= l && elem[0:l] == "List" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleCreateUsersWithListInputRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'l': // Prefix: "log"
						if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "in"
							if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleLoginUserRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'o': // Prefix: "out"
							if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleLogoutUserRequest([0]string{}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
					// Param: "username"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "DELETE":
							s.handleDeleteUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetUserByNameRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PUT":
							s.handleUpdateUserRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PUT")
						}

						return
					}
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'p': // Prefix: "pet"
				if l := len("pet"); len(elem) >= l && elem[0:l] == "pet" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						r.name = "AddPet"
						r.operationID = "addPet"
						r.pathPattern = "/pet"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = "UpdatePet"
						r.operationID = "updatePet"
						r.pathPattern = "/pet"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'f': // Prefix: "findBy"
						if l := len("findBy"); len(elem) >= l && elem[0:l] == "findBy" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'S': // Prefix: "Status"
							if l := len("Status"); len(elem) >= l && elem[0:l] == "Status" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: FindPetsByStatus
									r.name = "FindPetsByStatus"
									r.operationID = "findPetsByStatus"
									r.pathPattern = "/pet/findByStatus"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'T': // Prefix: "Tags"
							if l := len("Tags"); len(elem) >= l && elem[0:l] == "Tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: FindPetsByTags
									r.name = "FindPetsByTags"
									r.operationID = "findPetsByTags"
									r.pathPattern = "/pet/findByTags"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
					// Param: "petId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = "DeletePet"
							r.operationID = "deletePet"
							r.pathPattern = "/pet/{petId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = "GetPetById"
							r.operationID = "getPetById"
							r.pathPattern = "/pet/{petId}"
							r.args = args
							r.count = 1
							return r, true
						case "POST":
							r.name = "UpdatePetWithForm"
							r.operationID = "updatePetWithForm"
							r.pathPattern = "/pet/{petId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/uploadImage"
						if l := len("/uploadImage"); len(elem) >= l && elem[0:l] == "/uploadImage" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: UploadFile
								r.name = "UploadFile"
								r.operationID = "uploadFile"
								r.pathPattern = "/pet/{petId}/uploadImage"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 's': // Prefix: "store/"
				if l := len("store/"); len(elem) >= l && elem[0:l] == "store/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "inventory"
					if l := len("inventory"); len(elem) >= l && elem[0:l] == "inventory" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: GetInventory
							r.name = "GetInventory"
							r.operationID = "getInventory"
							r.pathPattern = "/store/inventory"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'o': // Prefix: "order/"
					if l := len("order/"); len(elem) >= l && elem[0:l] == "order/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "orderId"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteOrder
							r.name = "DeleteOrder"
							r.operationID = "deleteOrder"
							r.pathPattern = "/store/order/{orderId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: GetOrderById
							r.name = "GetOrderById"
							r.operationID = "getOrderById"
							r.pathPattern = "/store/order/{orderId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				case 's': // Prefix: "subscribe"
					if l := len("subscribe"); len(elem) >= l && elem[0:l] == "subscribe" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: StoreSubscribePost
							r.name = "StoreSubscribePost"
							r.operationID = ""
							r.pathPattern = "/store/subscribe"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'u': // Prefix: "user"
				if l := len("user"); len(elem) >= l && elem[0:l] == "user" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						r.name = "CreateUser"
						r.operationID = "createUser"
						r.pathPattern = "/user"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "createWith"
						if l := len("createWith"); len(elem) >= l && elem[0:l] == "createWith" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'A': // Prefix: "Array"
							if l := len("Array"); len(elem) >= l && elem[0:l] == "Array" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: CreateUsersWithArrayInput
									r.name = "CreateUsersWithArrayInput"
									r.operationID = "createUsersWithArrayInput"
									r.pathPattern = "/user/createWithArray"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'L': // Prefix: "List"
							if l := len("List"); len(elem) >= l && elem[0:l] == "List" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: CreateUsersWithListInput
									r.name = "CreateUsersWithListInput"
									r.operationID = "createUsersWithListInput"
									r.pathPattern = "/user/createWithList"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'l': // Prefix: "log"
						if l := len("log"); len(elem) >= l && elem[0:l] == "log" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'i': // Prefix: "in"
							if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: LoginUser
									r.name = "LoginUser"
									r.operationID = "loginUser"
									r.pathPattern = "/user/login"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'o': // Prefix: "out"
							if l := len("out"); len(elem) >= l && elem[0:l] == "out" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: LogoutUser
									r.name = "LogoutUser"
									r.operationID = "logoutUser"
									r.pathPattern = "/user/logout"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
					// Param: "username"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							// Leaf: DeleteUser
							r.name = "DeleteUser"
							r.operationID = "deleteUser"
							r.pathPattern = "/user/{username}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							// Leaf: GetUserByName
							r.name = "GetUserByName"
							r.operationID = "getUserByName"
							r.pathPattern = "/user/{username}"
							r.args = args
							r.count = 1
							return r, true
						case "PUT":
							// Leaf: UpdateUser
							r.name = "UpdateUser"
							r.operationID = "updateUser"
							r.pathPattern = "/user/{username}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			}
		}
	}
	return r, false
}
