// Package petstore_chi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package petstore_chi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
)

const (
	Api_keyScopes       = "api_key.Scopes"
	Petstore_authScopes = "petstore_auth.Scopes"
)

// Defines values for OrderStatus.
const (
	Approved  OrderStatus = "approved"
	Delivered OrderStatus = "delivered"
	Placed    OrderStatus = "placed"
)

// Defines values for PetStatus.
const (
	PetStatusAvailable PetStatus = "available"
	PetStatusPending   PetStatus = "pending"
	PetStatusSold      PetStatus = "sold"
)

// Defines values for AddPetJSONBodyStatus.
const (
	AddPetJSONBodyStatusAvailable AddPetJSONBodyStatus = "available"
	AddPetJSONBodyStatusPending   AddPetJSONBodyStatus = "pending"
	AddPetJSONBodyStatusSold      AddPetJSONBodyStatus = "sold"
)

// Defines values for UpdatePetJSONBodyStatus.
const (
	UpdatePetJSONBodyStatusAvailable UpdatePetJSONBodyStatus = "available"
	UpdatePetJSONBodyStatusPending   UpdatePetJSONBodyStatus = "pending"
	UpdatePetJSONBodyStatusSold      UpdatePetJSONBodyStatus = "sold"
)

// Defines values for FindPetsByStatusParamsStatus.
const (
	FindPetsByStatusParamsStatusAvailable FindPetsByStatusParamsStatus = "available"
	FindPetsByStatusParamsStatusPending   FindPetsByStatusParamsStatus = "pending"
	FindPetsByStatusParamsStatusSold      FindPetsByStatusParamsStatus = "sold"
)

// Defines values for PostStoreSubscribeJSONBodyEventName.
const (
	OrderDelivered  PostStoreSubscribeJSONBodyEventName = "orderDelivered"
	OrderInProgress PostStoreSubscribeJSONBodyEventName = "orderInProgress"
	OrderShipped    PostStoreSubscribeJSONBodyEventName = "orderShipped"
)

// Address defines model for Address.
type Address struct {
	City    *string `json:"city,omitempty"`
	Country *string `json:"country,omitempty"`

	// Street includes build/apartment number
	Street *string `json:"street,omitempty"`
}

// ApiResponse defines model for ApiResponse.
type ApiResponse struct {
	Code    *int32  `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
	Type    *string `json:"type,omitempty"`
}

// Category defines model for Category.
type Category struct {
	// Id Category ID
	Id *Id `json:"id,omitempty"`

	// Name Category name
	Name *string `json:"name,omitempty"`

	// Sub Test Sub Category
	Sub *struct {
		// Prop1 Dumb Property
		Prop1 *string `json:"prop1,omitempty"`
	} `json:"sub,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// Id defines model for Id.
type Id = int64

// Order defines model for Order.
type Order struct {
	// Complete Indicates whenever order was completed or not
	Complete *bool `json:"complete,omitempty"`

	// Id Order ID
	Id *Id `json:"id,omitempty"`

	// PetId Pet ID
	PetId    *Id    `json:"petId,omitempty"`
	Quantity *int32 `json:"quantity,omitempty"`

	// RequestId Unique Request Id
	RequestId *string `json:"requestId,omitempty"`

	// ShipDate Estimated ship date
	ShipDate *time.Time `json:"shipDate,omitempty"`

	// Status Order Status
	Status *OrderStatus `json:"status,omitempty"`
}

// OrderStatus Order Status
type OrderStatus string

// Pet defines model for Pet.
type Pet struct {
	// Category Categories this pet belongs to
	Category *Category `json:"category,omitempty"`
	Friend   *Pet      `json:"friend,omitempty"`

	// Id Pet ID
	Id *Id `json:"id,omitempty"`

	// Name The name given to a pet
	Name string `json:"name"`

	// PetType Type of a pet
	PetType *string `json:"petType,omitempty"`

	// PhotoUrls The list of URL to a cute photos featuring pet
	PhotoUrls []string `json:"photoUrls"`

	// Status Pet status in the store
	Status *PetStatus `json:"status,omitempty"`

	// Tags Tags attached to the pet
	Tags *[]Tag `json:"tags,omitempty"`
}

// PetStatus Pet status in the store
type PetStatus string

// Tag defines model for Tag.
type Tag struct {
	// Id Tag ID
	Id *Id `json:"id,omitempty"`

	// Name Tag name
	Name *string `json:"name,omitempty"`
}

// User defines model for User.
type User struct {
	Addresses *[]Address `json:"addresses,omitempty"`

	// Email User email address
	Email *openapi_types.Email `json:"email,omitempty"`

	// FirstName User first name
	FirstName *string `json:"firstName,omitempty"`
	Id        *Id     `json:"id,omitempty"`

	// LastName User last name
	LastName *string `json:"lastName,omitempty"`

	// Password User password, MUST contain a mix of upper and lower case letters, as well as digits
	Password *string   `json:"password,omitempty"`
	Pet      *User_Pet `json:"pet,omitempty"`

	// Phone User phone number in international format
	Phone *string `json:"phone,omitempty"`

	// UserStatus User status
	UserStatus *int32 `json:"userStatus,omitempty"`

	// Username User supplied username
	Username *string `json:"username,omitempty"`
}

// User_Pet defines model for User.Pet.
type User_Pet struct {
	union json.RawMessage
}

// AddPetJSONBody defines parameters for AddPet.
type AddPetJSONBody struct {
	// Category Categories this pet belongs to
	Category *Category `json:"category,omitempty"`
	Friend   *Pet      `json:"friend,omitempty"`

	// Id Pet ID
	Id *Id `json:"id,omitempty"`

	// Name The name given to a pet
	Name string `json:"name"`

	// PetType Type of a pet
	PetType *string `json:"petType,omitempty"`

	// PhotoUrls The list of URL to a cute photos featuring pet
	PhotoUrls []string `json:"photoUrls"`

	// Status Pet status in the store
	Status *AddPetJSONBodyStatus `json:"status,omitempty"`

	// Tags Tags attached to the pet
	Tags *[]Tag `json:"tags,omitempty"`
}

// AddPetParams defines parameters for AddPet.
type AddPetParams struct {
	// AcceptLanguage The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US
	AcceptLanguage *string `json:"Accept-Language,omitempty"`

	// CookieParam Some cookie
	CookieParam int64 `form:"cookieParam" json:"cookieParam"`
}

// AddPetJSONBodyStatus defines parameters for AddPet.
type AddPetJSONBodyStatus string

// UpdatePetJSONBody defines parameters for UpdatePet.
type UpdatePetJSONBody struct {
	// Category Categories this pet belongs to
	Category *Category `json:"category,omitempty"`
	Friend   *Pet      `json:"friend,omitempty"`

	// Id Pet ID
	Id *Id `json:"id,omitempty"`

	// Name The name given to a pet
	Name string `json:"name"`

	// PetType Type of a pet
	PetType *string `json:"petType,omitempty"`

	// PhotoUrls The list of URL to a cute photos featuring pet
	PhotoUrls []string `json:"photoUrls"`

	// Status Pet status in the store
	Status *UpdatePetJSONBodyStatus `json:"status,omitempty"`

	// Tags Tags attached to the pet
	Tags *[]Tag `json:"tags,omitempty"`
}

// UpdatePetParams defines parameters for UpdatePet.
type UpdatePetParams struct {
	// AcceptLanguage The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US
	AcceptLanguage *string `json:"Accept-Language,omitempty"`

	// CookieParam Some cookie
	CookieParam int64 `form:"cookieParam" json:"cookieParam"`
}

// UpdatePetJSONBodyStatus defines parameters for UpdatePet.
type UpdatePetJSONBodyStatus string

// FindPetsByStatusParams defines parameters for FindPetsByStatus.
type FindPetsByStatusParams struct {
	// Status Status values that need to be considered for filter
	Status []FindPetsByStatusParamsStatus `form:"status" json:"status"`
}

// FindPetsByStatusParamsStatus defines parameters for FindPetsByStatus.
type FindPetsByStatusParamsStatus string

// FindPetsByTagsParams defines parameters for FindPetsByTags.
type FindPetsByTagsParams struct {
	// Tags Tags to filter by
	Tags []string `form:"tags" json:"tags"`
}

// DeletePetParams defines parameters for DeletePet.
type DeletePetParams struct {
	ApiKey *string `json:"api_key,omitempty"`
}

// UpdatePetWithFormFormdataBody defines parameters for UpdatePetWithForm.
type UpdatePetWithFormFormdataBody struct {
	// Name Updated name of the pet
	Name *string `json:"name,omitempty"`

	// Status Updated status of the pet
	Status *string `json:"status,omitempty"`
}

// PostStoreSubscribeJSONBody defines parameters for PostStoreSubscribe.
type PostStoreSubscribeJSONBody struct {
	// CallbackUrl This URL will be called by the server when the desired event will occur
	CallbackUrl string `json:"callbackUrl"`

	// EventName Event name for the subscription
	EventName PostStoreSubscribeJSONBodyEventName `json:"eventName"`
}

// PostStoreSubscribeJSONBodyEventName defines parameters for PostStoreSubscribe.
type PostStoreSubscribeJSONBodyEventName string

// CreateUsersWithArrayInputJSONBody defines parameters for CreateUsersWithArrayInput.
type CreateUsersWithArrayInputJSONBody = []User

// CreateUsersWithListInputJSONBody defines parameters for CreateUsersWithListInput.
type CreateUsersWithListInputJSONBody = []User

// LoginUserParams defines parameters for LoginUser.
type LoginUserParams struct {
	// Username The user name for login
	Username string `form:"username" json:"username"`

	// Password The password for login in clear text
	Password string `form:"password" json:"password"`
}

// AddPetJSONRequestBody defines body for AddPet for application/json ContentType.
type AddPetJSONRequestBody AddPetJSONBody

// UpdatePetJSONRequestBody defines body for UpdatePet for application/json ContentType.
type UpdatePetJSONRequestBody UpdatePetJSONBody

// UpdatePetWithFormFormdataRequestBody defines body for UpdatePetWithForm for application/x-www-form-urlencoded ContentType.
type UpdatePetWithFormFormdataRequestBody UpdatePetWithFormFormdataBody

// PlaceOrderJSONRequestBody defines body for PlaceOrder for application/json ContentType.
type PlaceOrderJSONRequestBody = Order

// PostStoreSubscribeJSONRequestBody defines body for PostStoreSubscribe for application/json ContentType.
type PostStoreSubscribeJSONRequestBody PostStoreSubscribeJSONBody

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = User

// CreateUsersWithArrayInputJSONRequestBody defines body for CreateUsersWithArrayInput for application/json ContentType.
type CreateUsersWithArrayInputJSONRequestBody = CreateUsersWithArrayInputJSONBody

// CreateUsersWithListInputJSONRequestBody defines body for CreateUsersWithListInput for application/json ContentType.
type CreateUsersWithListInputJSONRequestBody = CreateUsersWithListInputJSONBody

// UpdateUserJSONRequestBody defines body for UpdateUser for application/json ContentType.
type UpdateUserJSONRequestBody = User

// AsPet returns the union data inside the User_Pet as a Pet
func (t User_Pet) AsPet() (Pet, error) {
	var body Pet
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPet overwrites any union data inside the User_Pet as the provided Pet
func (t *User_Pet) FromPet(v Pet) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePet performs a merge with any union data inside the User_Pet, using the provided Pet
func (t *User_Pet) MergePet(v Pet) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

// AsTag returns the union data inside the User_Pet as a Tag
func (t User_Pet) AsTag() (Tag, error) {
	var body Tag
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromTag overwrites any union data inside the User_Pet as the provided Tag
func (t *User_Pet) FromTag(v Tag) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeTag performs a merge with any union data inside the User_Pet, using the provided Tag
func (t *User_Pet) MergeTag(v Tag) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(b, t.union)
	t.union = merged
	return err
}

func (t User_Pet) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *User_Pet) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AddPet request with any body
	AddPetWithBody(ctx context.Context, params *AddPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddPet(ctx context.Context, params *AddPetParams, body AddPetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePet request with any body
	UpdatePetWithBody(ctx context.Context, params *UpdatePetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePet(ctx context.Context, params *UpdatePetParams, body UpdatePetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPetsByStatus request
	FindPetsByStatus(ctx context.Context, params *FindPetsByStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FindPetsByTags request
	FindPetsByTags(ctx context.Context, params *FindPetsByTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePet request
	DeletePet(ctx context.Context, petId int64, params *DeletePetParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPetById request
	GetPetById(ctx context.Context, petId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePetWithForm request with any body
	UpdatePetWithFormWithBody(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePetWithFormWithFormdataBody(ctx context.Context, petId int64, body UpdatePetWithFormFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UploadFile request with any body
	UploadFileWithBody(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInventory request
	GetInventory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PlaceOrder request with any body
	PlaceOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PlaceOrder(ctx context.Context, body PlaceOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOrder request
	DeleteOrder(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrderById request
	GetOrderById(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostStoreSubscribe request with any body
	PostStoreSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostStoreSubscribe(ctx context.Context, body PostStoreSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsersWithArrayInput request with any body
	CreateUsersWithArrayInputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUsersWithArrayInput(ctx context.Context, body CreateUsersWithArrayInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsersWithListInput request with any body
	CreateUsersWithListInputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUsersWithListInput(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginUser request
	LoginUser(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LogoutUser request
	LogoutUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUser request
	DeleteUser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByName request
	GetUserByName(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUser request with any body
	UpdateUserWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateUser(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AddPetWithBody(ctx context.Context, params *AddPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddPet(ctx context.Context, params *AddPetParams, body AddPetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddPetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePetWithBody(ctx context.Context, params *UpdatePetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePetRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePet(ctx context.Context, params *UpdatePetParams, body UpdatePetJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePetRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPetsByStatus(ctx context.Context, params *FindPetsByStatusParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPetsByStatusRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FindPetsByTags(ctx context.Context, params *FindPetsByTagsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFindPetsByTagsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePet(ctx context.Context, petId int64, params *DeletePetParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePetRequest(c.Server, petId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPetById(ctx context.Context, petId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPetByIdRequest(c.Server, petId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePetWithFormWithBody(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePetWithFormRequestWithBody(c.Server, petId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePetWithFormWithFormdataBody(ctx context.Context, petId int64, body UpdatePetWithFormFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePetWithFormRequestWithFormdataBody(c.Server, petId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UploadFileWithBody(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUploadFileRequestWithBody(c.Server, petId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInventory(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInventoryRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlaceOrderWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlaceOrderRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PlaceOrder(ctx context.Context, body PlaceOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPlaceOrderRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOrder(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOrderRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrderById(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrderByIdRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoreSubscribeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoreSubscribeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostStoreSubscribe(ctx context.Context, body PostStoreSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostStoreSubscribeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsersWithArrayInputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsersWithArrayInputRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsersWithArrayInput(ctx context.Context, body CreateUsersWithArrayInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsersWithArrayInputRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsersWithListInputWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsersWithListInputRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsersWithListInput(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsersWithListInputRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginUser(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LogoutUser(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLogoutUserRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUser(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByName(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByNameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUserWithBody(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequestWithBody(c.Server, username, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUser(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUserRequest(c.Server, username, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAddPetRequest calls the generic AddPet builder with application/json body
func NewAddPetRequest(server string, params *AddPetParams, body AddPetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddPetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAddPetRequestWithBody generates requests for AddPet with any type of body
func NewAddPetRequestWithBody(server string, params *AddPetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.AcceptLanguage != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept-Language", headerParam0)
	}

	var cookieParam0 string

	cookieParam0, err = runtime.StyleParamWithLocation("simple", true, "cookieParam", runtime.ParamLocationCookie, params.CookieParam)
	if err != nil {
		return nil, err
	}

	cookie0 := &http.Cookie{
		Name:  "cookieParam",
		Value: cookieParam0,
	}
	req.AddCookie(cookie0)

	return req, nil
}

// NewUpdatePetRequest calls the generic UpdatePet builder with application/json body
func NewUpdatePetRequest(server string, params *UpdatePetParams, body UpdatePetJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePetRequestWithBody(server, params, "application/json", bodyReader)
}

// NewUpdatePetRequestWithBody generates requests for UpdatePet with any type of body
func NewUpdatePetRequestWithBody(server string, params *UpdatePetParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params.AcceptLanguage != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, *params.AcceptLanguage)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Accept-Language", headerParam0)
	}

	var cookieParam0 string

	cookieParam0, err = runtime.StyleParamWithLocation("simple", true, "cookieParam", runtime.ParamLocationCookie, params.CookieParam)
	if err != nil {
		return nil, err
	}

	cookie0 := &http.Cookie{
		Name:  "cookieParam",
		Value: cookieParam0,
	}
	req.AddCookie(cookie0)

	return req, nil
}

// NewFindPetsByStatusRequest generates requests for FindPetsByStatus
func NewFindPetsByStatusRequest(server string, params *FindPetsByStatusParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet/findByStatus")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, params.Status); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFindPetsByTagsRequest generates requests for FindPetsByTags
func NewFindPetsByTagsRequest(server string, params *FindPetsByTagsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet/findByTags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tags", runtime.ParamLocationQuery, params.Tags); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeletePetRequest generates requests for DeletePet
func NewDeletePetRequest(server string, petId int64, params *DeletePetParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.ApiKey != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, *params.ApiKey)
		if err != nil {
			return nil, err
		}

		req.Header.Set("api_key", headerParam0)
	}

	return req, nil
}

// NewGetPetByIdRequest generates requests for GetPetById
func NewGetPetByIdRequest(server string, petId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePetWithFormRequestWithFormdataBody calls the generic UpdatePetWithForm builder with application/x-www-form-urlencoded body
func NewUpdatePetWithFormRequestWithFormdataBody(server string, petId int64, body UpdatePetWithFormFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewUpdatePetWithFormRequestWithBody(server, petId, "application/x-www-form-urlencoded", bodyReader)
}

// NewUpdatePetWithFormRequestWithBody generates requests for UpdatePetWithForm with any type of body
func NewUpdatePetWithFormRequestWithBody(server string, petId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUploadFileRequestWithBody generates requests for UploadFile with any type of body
func NewUploadFileRequestWithBody(server string, petId int64, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "petId", runtime.ParamLocationPath, petId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/pet/%s/uploadImage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetInventoryRequest generates requests for GetInventory
func NewGetInventoryRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/inventory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPlaceOrderRequest calls the generic PlaceOrder builder with application/json body
func NewPlaceOrderRequest(server string, body PlaceOrderJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPlaceOrderRequestWithBody(server, "application/json", bodyReader)
}

// NewPlaceOrderRequestWithBody generates requests for PlaceOrder with any type of body
func NewPlaceOrderRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/order")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOrderRequest generates requests for DeleteOrder
func NewDeleteOrderRequest(server string, orderId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrderByIdRequest generates requests for GetOrderById
func NewGetOrderByIdRequest(server string, orderId int64) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostStoreSubscribeRequest calls the generic PostStoreSubscribe builder with application/json body
func NewPostStoreSubscribeRequest(server string, body PostStoreSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostStoreSubscribeRequestWithBody(server, "application/json", bodyReader)
}

// NewPostStoreSubscribeRequestWithBody generates requests for PostStoreSubscribe with any type of body
func NewPostStoreSubscribeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/store/subscribe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUsersWithArrayInputRequest calls the generic CreateUsersWithArrayInput builder with application/json body
func NewCreateUsersWithArrayInputRequest(server string, body CreateUsersWithArrayInputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUsersWithArrayInputRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUsersWithArrayInputRequestWithBody generates requests for CreateUsersWithArrayInput with any type of body
func NewCreateUsersWithArrayInputRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/createWithArray")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateUsersWithListInputRequest calls the generic CreateUsersWithListInput builder with application/json body
func NewCreateUsersWithListInputRequest(server string, body CreateUsersWithListInputJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUsersWithListInputRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUsersWithListInputRequestWithBody generates requests for CreateUsersWithListInput with any type of body
func NewCreateUsersWithListInputRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/createWithList")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginUserRequest generates requests for LoginUser
func NewLoginUserRequest(server string, params *LoginUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "username", runtime.ParamLocationQuery, params.Username); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "password", runtime.ParamLocationQuery, params.Password); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLogoutUserRequest generates requests for LogoutUser
func NewLogoutUserRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteUserRequest generates requests for DeleteUser
func NewDeleteUserRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserByNameRequest generates requests for GetUserByName
func NewGetUserByNameRequest(server string, username string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUserRequest calls the generic UpdateUser builder with application/json body
func NewUpdateUserRequest(server string, username string, body UpdateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateUserRequestWithBody(server, username, "application/json", bodyReader)
}

// NewUpdateUserRequestWithBody generates requests for UpdateUser with any type of body
func NewUpdateUserRequestWithBody(server string, username string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AddPet request with any body
	AddPetWithBodyWithResponse(ctx context.Context, params *AddPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPetResponse, error)

	AddPetWithResponse(ctx context.Context, params *AddPetParams, body AddPetJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPetResponse, error)

	// UpdatePet request with any body
	UpdatePetWithBodyWithResponse(ctx context.Context, params *UpdatePetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePetResponse, error)

	UpdatePetWithResponse(ctx context.Context, params *UpdatePetParams, body UpdatePetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePetResponse, error)

	// FindPetsByStatus request
	FindPetsByStatusWithResponse(ctx context.Context, params *FindPetsByStatusParams, reqEditors ...RequestEditorFn) (*FindPetsByStatusResponse, error)

	// FindPetsByTags request
	FindPetsByTagsWithResponse(ctx context.Context, params *FindPetsByTagsParams, reqEditors ...RequestEditorFn) (*FindPetsByTagsResponse, error)

	// DeletePet request
	DeletePetWithResponse(ctx context.Context, petId int64, params *DeletePetParams, reqEditors ...RequestEditorFn) (*DeletePetResponse, error)

	// GetPetById request
	GetPetByIdWithResponse(ctx context.Context, petId int64, reqEditors ...RequestEditorFn) (*GetPetByIdResponse, error)

	// UpdatePetWithForm request with any body
	UpdatePetWithFormWithBodyWithResponse(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePetWithFormResponse, error)

	UpdatePetWithFormWithFormdataBodyWithResponse(ctx context.Context, petId int64, body UpdatePetWithFormFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdatePetWithFormResponse, error)

	// UploadFile request with any body
	UploadFileWithBodyWithResponse(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error)

	// GetInventory request
	GetInventoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInventoryResponse, error)

	// PlaceOrder request with any body
	PlaceOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlaceOrderResponse, error)

	PlaceOrderWithResponse(ctx context.Context, body PlaceOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PlaceOrderResponse, error)

	// DeleteOrder request
	DeleteOrderWithResponse(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*DeleteOrderResponse, error)

	// GetOrderById request
	GetOrderByIdWithResponse(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*GetOrderByIdResponse, error)

	// PostStoreSubscribe request with any body
	PostStoreSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoreSubscribeResponse, error)

	PostStoreSubscribeWithResponse(ctx context.Context, body PostStoreSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoreSubscribeResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// CreateUsersWithArrayInput request with any body
	CreateUsersWithArrayInputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsersWithArrayInputResponse, error)

	CreateUsersWithArrayInputWithResponse(ctx context.Context, body CreateUsersWithArrayInputJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsersWithArrayInputResponse, error)

	// CreateUsersWithListInput request with any body
	CreateUsersWithListInputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error)

	CreateUsersWithListInputWithResponse(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error)

	// LoginUser request
	LoginUserWithResponse(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*LoginUserResponse, error)

	// LogoutUser request
	LogoutUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutUserResponse, error)

	// DeleteUser request
	DeleteUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error)

	// GetUserByName request
	GetUserByNameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserByNameResponse, error)

	// UpdateUser request with any body
	UpdateUserWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)

	UpdateUserWithResponse(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error)
}

type AddPetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r AddPetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddPetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPetsByStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pet
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r FindPetsByStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPetsByStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FindPetsByTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Pet
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r FindPetsByTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FindPetsByTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r DeletePetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPetByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Pet
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetPetByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPetByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePetWithFormResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON405      *Error
}

// Status returns HTTPResponse.Status
func (r UpdatePetWithFormResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePetWithFormResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UploadFileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiResponse
}

// Status returns HTTPResponse.Status
func (r UploadFileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UploadFileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInventoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]int32
}

// Status returns HTTPResponse.Status
func (r GetInventoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInventoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PlaceOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
}

// Status returns HTTPResponse.Status
func (r PlaceOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PlaceOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOrderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteOrderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOrderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Order
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetOrderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostStoreSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		SubscriptionId *string `json:"subscriptionId,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r PostStoreSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostStoreSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsersWithArrayInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateUsersWithArrayInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsersWithArrayInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsersWithListInputResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateUsersWithListInputResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsersWithListInputResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
	JSON400      *Error
}

// Status returns HTTPResponse.Status
func (r LoginUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LogoutUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r LogoutUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LogoutUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r GetUserByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON404      *Error
}

// Status returns HTTPResponse.Status
func (r UpdateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AddPetWithBodyWithResponse request with arbitrary body returning *AddPetResponse
func (c *ClientWithResponses) AddPetWithBodyWithResponse(ctx context.Context, params *AddPetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddPetResponse, error) {
	rsp, err := c.AddPetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPetResponse(rsp)
}

func (c *ClientWithResponses) AddPetWithResponse(ctx context.Context, params *AddPetParams, body AddPetJSONRequestBody, reqEditors ...RequestEditorFn) (*AddPetResponse, error) {
	rsp, err := c.AddPet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddPetResponse(rsp)
}

// UpdatePetWithBodyWithResponse request with arbitrary body returning *UpdatePetResponse
func (c *ClientWithResponses) UpdatePetWithBodyWithResponse(ctx context.Context, params *UpdatePetParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePetResponse, error) {
	rsp, err := c.UpdatePetWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePetResponse(rsp)
}

func (c *ClientWithResponses) UpdatePetWithResponse(ctx context.Context, params *UpdatePetParams, body UpdatePetJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePetResponse, error) {
	rsp, err := c.UpdatePet(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePetResponse(rsp)
}

// FindPetsByStatusWithResponse request returning *FindPetsByStatusResponse
func (c *ClientWithResponses) FindPetsByStatusWithResponse(ctx context.Context, params *FindPetsByStatusParams, reqEditors ...RequestEditorFn) (*FindPetsByStatusResponse, error) {
	rsp, err := c.FindPetsByStatus(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPetsByStatusResponse(rsp)
}

// FindPetsByTagsWithResponse request returning *FindPetsByTagsResponse
func (c *ClientWithResponses) FindPetsByTagsWithResponse(ctx context.Context, params *FindPetsByTagsParams, reqEditors ...RequestEditorFn) (*FindPetsByTagsResponse, error) {
	rsp, err := c.FindPetsByTags(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFindPetsByTagsResponse(rsp)
}

// DeletePetWithResponse request returning *DeletePetResponse
func (c *ClientWithResponses) DeletePetWithResponse(ctx context.Context, petId int64, params *DeletePetParams, reqEditors ...RequestEditorFn) (*DeletePetResponse, error) {
	rsp, err := c.DeletePet(ctx, petId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePetResponse(rsp)
}

// GetPetByIdWithResponse request returning *GetPetByIdResponse
func (c *ClientWithResponses) GetPetByIdWithResponse(ctx context.Context, petId int64, reqEditors ...RequestEditorFn) (*GetPetByIdResponse, error) {
	rsp, err := c.GetPetById(ctx, petId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPetByIdResponse(rsp)
}

// UpdatePetWithFormWithBodyWithResponse request with arbitrary body returning *UpdatePetWithFormResponse
func (c *ClientWithResponses) UpdatePetWithFormWithBodyWithResponse(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePetWithFormResponse, error) {
	rsp, err := c.UpdatePetWithFormWithBody(ctx, petId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePetWithFormResponse(rsp)
}

func (c *ClientWithResponses) UpdatePetWithFormWithFormdataBodyWithResponse(ctx context.Context, petId int64, body UpdatePetWithFormFormdataRequestBody, reqEditors ...RequestEditorFn) (*UpdatePetWithFormResponse, error) {
	rsp, err := c.UpdatePetWithFormWithFormdataBody(ctx, petId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePetWithFormResponse(rsp)
}

// UploadFileWithBodyWithResponse request with arbitrary body returning *UploadFileResponse
func (c *ClientWithResponses) UploadFileWithBodyWithResponse(ctx context.Context, petId int64, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UploadFileResponse, error) {
	rsp, err := c.UploadFileWithBody(ctx, petId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUploadFileResponse(rsp)
}

// GetInventoryWithResponse request returning *GetInventoryResponse
func (c *ClientWithResponses) GetInventoryWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInventoryResponse, error) {
	rsp, err := c.GetInventory(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInventoryResponse(rsp)
}

// PlaceOrderWithBodyWithResponse request with arbitrary body returning *PlaceOrderResponse
func (c *ClientWithResponses) PlaceOrderWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PlaceOrderResponse, error) {
	rsp, err := c.PlaceOrderWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlaceOrderResponse(rsp)
}

func (c *ClientWithResponses) PlaceOrderWithResponse(ctx context.Context, body PlaceOrderJSONRequestBody, reqEditors ...RequestEditorFn) (*PlaceOrderResponse, error) {
	rsp, err := c.PlaceOrder(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePlaceOrderResponse(rsp)
}

// DeleteOrderWithResponse request returning *DeleteOrderResponse
func (c *ClientWithResponses) DeleteOrderWithResponse(ctx context.Context, orderId string, reqEditors ...RequestEditorFn) (*DeleteOrderResponse, error) {
	rsp, err := c.DeleteOrder(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOrderResponse(rsp)
}

// GetOrderByIdWithResponse request returning *GetOrderByIdResponse
func (c *ClientWithResponses) GetOrderByIdWithResponse(ctx context.Context, orderId int64, reqEditors ...RequestEditorFn) (*GetOrderByIdResponse, error) {
	rsp, err := c.GetOrderById(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrderByIdResponse(rsp)
}

// PostStoreSubscribeWithBodyWithResponse request with arbitrary body returning *PostStoreSubscribeResponse
func (c *ClientWithResponses) PostStoreSubscribeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostStoreSubscribeResponse, error) {
	rsp, err := c.PostStoreSubscribeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoreSubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostStoreSubscribeWithResponse(ctx context.Context, body PostStoreSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostStoreSubscribeResponse, error) {
	rsp, err := c.PostStoreSubscribe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostStoreSubscribeResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// CreateUsersWithArrayInputWithBodyWithResponse request with arbitrary body returning *CreateUsersWithArrayInputResponse
func (c *ClientWithResponses) CreateUsersWithArrayInputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsersWithArrayInputResponse, error) {
	rsp, err := c.CreateUsersWithArrayInputWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsersWithArrayInputResponse(rsp)
}

func (c *ClientWithResponses) CreateUsersWithArrayInputWithResponse(ctx context.Context, body CreateUsersWithArrayInputJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsersWithArrayInputResponse, error) {
	rsp, err := c.CreateUsersWithArrayInput(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsersWithArrayInputResponse(rsp)
}

// CreateUsersWithListInputWithBodyWithResponse request with arbitrary body returning *CreateUsersWithListInputResponse
func (c *ClientWithResponses) CreateUsersWithListInputWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error) {
	rsp, err := c.CreateUsersWithListInputWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsersWithListInputResponse(rsp)
}

func (c *ClientWithResponses) CreateUsersWithListInputWithResponse(ctx context.Context, body CreateUsersWithListInputJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUsersWithListInputResponse, error) {
	rsp, err := c.CreateUsersWithListInput(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsersWithListInputResponse(rsp)
}

// LoginUserWithResponse request returning *LoginUserResponse
func (c *ClientWithResponses) LoginUserWithResponse(ctx context.Context, params *LoginUserParams, reqEditors ...RequestEditorFn) (*LoginUserResponse, error) {
	rsp, err := c.LoginUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginUserResponse(rsp)
}

// LogoutUserWithResponse request returning *LogoutUserResponse
func (c *ClientWithResponses) LogoutUserWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*LogoutUserResponse, error) {
	rsp, err := c.LogoutUser(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLogoutUserResponse(rsp)
}

// DeleteUserWithResponse request returning *DeleteUserResponse
func (c *ClientWithResponses) DeleteUserWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*DeleteUserResponse, error) {
	rsp, err := c.DeleteUser(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserResponse(rsp)
}

// GetUserByNameWithResponse request returning *GetUserByNameResponse
func (c *ClientWithResponses) GetUserByNameWithResponse(ctx context.Context, username string, reqEditors ...RequestEditorFn) (*GetUserByNameResponse, error) {
	rsp, err := c.GetUserByName(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByNameResponse(rsp)
}

// UpdateUserWithBodyWithResponse request with arbitrary body returning *UpdateUserResponse
func (c *ClientWithResponses) UpdateUserWithBodyWithResponse(ctx context.Context, username string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUserWithBody(ctx, username, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

func (c *ClientWithResponses) UpdateUserWithResponse(ctx context.Context, username string, body UpdateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateUserResponse, error) {
	rsp, err := c.UpdateUser(ctx, username, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUserResponse(rsp)
}

// ParseAddPetResponse parses an HTTP response from a AddPetWithResponse call
func ParseAddPetResponse(rsp *http.Response) (*AddPetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddPetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseUpdatePetResponse parses an HTTP response from a UpdatePetWithResponse call
func ParseUpdatePetResponse(rsp *http.Response) (*UpdatePetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseFindPetsByStatusResponse parses an HTTP response from a FindPetsByStatusWithResponse call
func ParseFindPetsByStatusResponse(rsp *http.Response) (*FindPetsByStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPetsByStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseFindPetsByTagsResponse parses an HTTP response from a FindPetsByTagsWithResponse call
func ParseFindPetsByTagsResponse(rsp *http.Response) (*FindPetsByTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FindPetsByTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Pet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeletePetResponse parses an HTTP response from a DeletePetWithResponse call
func ParseDeletePetResponse(rsp *http.Response) (*DeletePetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPetByIdResponse parses an HTTP response from a GetPetByIdWithResponse call
func ParseGetPetByIdResponse(rsp *http.Response) (*GetPetByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPetByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Pet
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdatePetWithFormResponse parses an HTTP response from a UpdatePetWithFormWithResponse call
func ParseUpdatePetWithFormResponse(rsp *http.Response) (*UpdatePetWithFormResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePetWithFormResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 405:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON405 = &dest

	}

	return response, nil
}

// ParseUploadFileResponse parses an HTTP response from a UploadFileWithResponse call
func ParseUploadFileResponse(rsp *http.Response) (*UploadFileResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UploadFileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInventoryResponse parses an HTTP response from a GetInventoryWithResponse call
func ParseGetInventoryResponse(rsp *http.Response) (*GetInventoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInventoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePlaceOrderResponse parses an HTTP response from a PlaceOrderWithResponse call
func ParsePlaceOrderResponse(rsp *http.Response) (*PlaceOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PlaceOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteOrderResponse parses an HTTP response from a DeleteOrderWithResponse call
func ParseDeleteOrderResponse(rsp *http.Response) (*DeleteOrderResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOrderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetOrderByIdResponse parses an HTTP response from a GetOrderByIdWithResponse call
func ParseGetOrderByIdResponse(rsp *http.Response) (*GetOrderByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Order
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParsePostStoreSubscribeResponse parses an HTTP response from a PostStoreSubscribeWithResponse call
func ParsePostStoreSubscribeResponse(rsp *http.Response) (*PostStoreSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostStoreSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			SubscriptionId *string `json:"subscriptionId,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateUsersWithArrayInputResponse parses an HTTP response from a CreateUsersWithArrayInputWithResponse call
func ParseCreateUsersWithArrayInputResponse(rsp *http.Response) (*CreateUsersWithArrayInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsersWithArrayInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCreateUsersWithListInputResponse parses an HTTP response from a CreateUsersWithListInputWithResponse call
func ParseCreateUsersWithListInputResponse(rsp *http.Response) (*CreateUsersWithListInputResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsersWithListInputResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseLoginUserResponse parses an HTTP response from a LoginUserWithResponse call
func ParseLoginUserResponse(rsp *http.Response) (*LoginUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseLogoutUserResponse parses an HTTP response from a LogoutUserWithResponse call
func ParseLogoutUserResponse(rsp *http.Response) (*LogoutUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LogoutUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteUserResponse parses an HTTP response from a DeleteUserWithResponse call
func ParseDeleteUserResponse(rsp *http.Response) (*DeleteUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseGetUserByNameResponse parses an HTTP response from a GetUserByNameWithResponse call
func ParseGetUserByNameResponse(rsp *http.Response) (*GetUserByNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseUpdateUserResponse parses an HTTP response from a UpdateUserWithResponse call
func ParseUpdateUserResponse(rsp *http.Response) (*UpdateUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Add a new pet to the store
	// (POST /pet)
	AddPet(w http.ResponseWriter, r *http.Request, params AddPetParams)
	// Update an existing pet
	// (PUT /pet)
	UpdatePet(w http.ResponseWriter, r *http.Request, params UpdatePetParams)
	// Finds Pets by status
	// (GET /pet/findByStatus)
	FindPetsByStatus(w http.ResponseWriter, r *http.Request, params FindPetsByStatusParams)
	// Finds Pets by tags
	// (GET /pet/findByTags)
	FindPetsByTags(w http.ResponseWriter, r *http.Request, params FindPetsByTagsParams)
	// Deletes a pet
	// (DELETE /pet/{petId})
	DeletePet(w http.ResponseWriter, r *http.Request, petId int64, params DeletePetParams)
	// Find pet by ID
	// (GET /pet/{petId})
	GetPetById(w http.ResponseWriter, r *http.Request, petId int64)
	// Updates a pet in the store with form data
	// (POST /pet/{petId})
	UpdatePetWithForm(w http.ResponseWriter, r *http.Request, petId int64)
	// uploads an image
	// (POST /pet/{petId}/uploadImage)
	UploadFile(w http.ResponseWriter, r *http.Request, petId int64)
	// Returns pet inventories by status
	// (GET /store/inventory)
	GetInventory(w http.ResponseWriter, r *http.Request)
	// Place an order for a pet
	// (POST /store/order)
	PlaceOrder(w http.ResponseWriter, r *http.Request)
	// Delete purchase order by ID
	// (DELETE /store/order/{orderId})
	DeleteOrder(w http.ResponseWriter, r *http.Request, orderId string)
	// Find purchase order by ID
	// (GET /store/order/{orderId})
	GetOrderById(w http.ResponseWriter, r *http.Request, orderId int64)
	// Subscribe to the Store events
	// (POST /store/subscribe)
	PostStoreSubscribe(w http.ResponseWriter, r *http.Request)
	// Create user
	// (POST /user)
	CreateUser(w http.ResponseWriter, r *http.Request)
	// Creates list of users with given input array
	// (POST /user/createWithArray)
	CreateUsersWithArrayInput(w http.ResponseWriter, r *http.Request)
	// Creates list of users with given input array
	// (POST /user/createWithList)
	CreateUsersWithListInput(w http.ResponseWriter, r *http.Request)
	// Logs user into the system
	// (GET /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request, params LoginUserParams)
	// Logs out current logged in user session
	// (GET /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Delete user
	// (DELETE /user/{username})
	DeleteUser(w http.ResponseWriter, r *http.Request, username string)
	// Get user by user name
	// (GET /user/{username})
	GetUserByName(w http.ResponseWriter, r *http.Request, username string)
	// Updated user
	// (PUT /user/{username})
	UpdateUser(w http.ResponseWriter, r *http.Request, username string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// AddPet operation middleware
func (siw *ServerInterfaceWrapper) AddPet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AddPetParams

	headers := r.Header

	// ------------- Optional header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Accept-Language", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Accept-Language", Err: err})
			return
		}

		params.AcceptLanguage = &AcceptLanguage

	}

	var cookie *http.Cookie

	if cookie, err = r.Cookie("cookieParam"); err == nil {
		var value int64
		err = runtime.BindStyledParameter("simple", true, "cookieParam", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cookieParam", Err: err})
			return
		}
		params.CookieParam = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "cookieParam"})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.AddPet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePet operation middleware
func (siw *ServerInterfaceWrapper) UpdatePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdatePetParams

	headers := r.Header

	// ------------- Optional header parameter "Accept-Language" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Accept-Language")]; found {
		var AcceptLanguage string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "Accept-Language", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Accept-Language", runtime.ParamLocationHeader, valueList[0], &AcceptLanguage)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "Accept-Language", Err: err})
			return
		}

		params.AcceptLanguage = &AcceptLanguage

	}

	var cookie *http.Cookie

	if cookie, err = r.Cookie("cookieParam"); err == nil {
		var value int64
		err = runtime.BindStyledParameter("simple", true, "cookieParam", cookie.Value, &value)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cookieParam", Err: err})
			return
		}
		params.CookieParam = value

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "cookieParam"})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePet(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindPetsByStatus operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByStatus(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByStatusParams

	// ------------- Required query parameter "status" -------------

	if paramValue := r.URL.Query().Get("status"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "status"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetsByStatus(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// FindPetsByTags operation middleware
func (siw *ServerInterfaceWrapper) FindPetsByTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPetsByTagsParams

	// ------------- Required query parameter "tags" -------------

	if paramValue := r.URL.Query().Get("tags"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "tags"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "tags", r.URL.Query(), &params.Tags)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "tags", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.FindPetsByTags(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeletePet operation middleware
func (siw *ServerInterfaceWrapper) DeletePet(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, chi.URLParam(r, "petId"), &petId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	// Parameter object where we will unmarshal all parameters from the context
	var params DeletePetParams

	headers := r.Header

	// ------------- Optional header parameter "api_key" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("api_key")]; found {
		var ApiKey string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandlerFunc(w, r, &TooManyValuesForParamError{ParamName: "api_key", Count: n})
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "api_key", runtime.ParamLocationHeader, valueList[0], &ApiKey)
		if err != nil {
			siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "api_key", Err: err})
			return
		}

		params.ApiKey = &ApiKey

	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeletePet(w, r, petId, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetPetById operation middleware
func (siw *ServerInterfaceWrapper) GetPetById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, chi.URLParam(r, "petId"), &petId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Api_keyScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPetById(w, r, petId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdatePetWithForm operation middleware
func (siw *ServerInterfaceWrapper) UpdatePetWithForm(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, chi.URLParam(r, "petId"), &petId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdatePetWithForm(w, r, petId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UploadFile operation middleware
func (siw *ServerInterfaceWrapper) UploadFile(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "petId" -------------
	var petId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "petId", runtime.ParamLocationPath, chi.URLParam(r, "petId"), &petId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "petId", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Petstore_authScopes, []string{"write:pets", "read:pets"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UploadFile(w, r, petId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetInventory operation middleware
func (siw *ServerInterfaceWrapper) GetInventory(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Api_keyScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetInventory(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PlaceOrder operation middleware
func (siw *ServerInterfaceWrapper) PlaceOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PlaceOrder(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, chi.URLParam(r, "orderId"), &orderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteOrder(w, r, orderId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetOrderById operation middleware
func (siw *ServerInterfaceWrapper) GetOrderById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId int64

	err = runtime.BindStyledParameterWithLocation("simple", false, "orderId", runtime.ParamLocationPath, chi.URLParam(r, "orderId"), &orderId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetOrderById(w, r, orderId)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostStoreSubscribe operation middleware
func (siw *ServerInterfaceWrapper) PostStoreSubscribe(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostStoreSubscribe(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUser operation middleware
func (siw *ServerInterfaceWrapper) CreateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUser(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUsersWithArrayInput operation middleware
func (siw *ServerInterfaceWrapper) CreateUsersWithArrayInput(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUsersWithArrayInput(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateUsersWithListInput operation middleware
func (siw *ServerInterfaceWrapper) CreateUsersWithListInput(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateUsersWithListInput(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params LoginUserParams

	// ------------- Required query parameter "username" -------------

	if paramValue := r.URL.Query().Get("username"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "username"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "username", r.URL.Query(), &params.Username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	// ------------- Required query parameter "password" -------------

	if paramValue := r.URL.Query().Get("password"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "password"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "password", r.URL.Query(), &params.Password)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "password", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r, params)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteUser operation middleware
func (siw *ServerInterfaceWrapper) DeleteUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteUser(w, r, username)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserByName operation middleware
func (siw *ServerInterfaceWrapper) GetUserByName(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserByName(w, r, username)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateUser operation middleware
func (siw *ServerInterfaceWrapper) UpdateUser(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "username" -------------
	var username string

	err = runtime.BindStyledParameterWithLocation("simple", false, "username", runtime.ParamLocationPath, chi.URLParam(r, "username"), &username)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "username", Err: err})
		return
	}

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateUser(w, r, username)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pet", wrapper.AddPet)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/pet", wrapper.UpdatePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pet/findByStatus", wrapper.FindPetsByStatus)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pet/findByTags", wrapper.FindPetsByTags)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/pet/{petId}", wrapper.DeletePet)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/pet/{petId}", wrapper.GetPetById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pet/{petId}", wrapper.UpdatePetWithForm)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/pet/{petId}/uploadImage", wrapper.UploadFile)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/store/inventory", wrapper.GetInventory)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/store/order", wrapper.PlaceOrder)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/store/order/{orderId}", wrapper.DeleteOrder)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/store/order/{orderId}", wrapper.GetOrderById)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/store/subscribe", wrapper.PostStoreSubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user", wrapper.CreateUser)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/createWithArray", wrapper.CreateUsersWithArrayInput)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/user/createWithList", wrapper.CreateUsersWithListInput)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/login", wrapper.LoginUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/logout", wrapper.LogoutUser)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/user/{username}", wrapper.DeleteUser)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/user/{username}", wrapper.GetUserByName)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/user/{username}", wrapper.UpdateUser)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
